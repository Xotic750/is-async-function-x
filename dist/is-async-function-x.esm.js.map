{"version":3,"sources":["../src/is-async-function-x.js"],"names":[],"mappings":";;;;AAAA,OAAO,WAAP,MAAwB,iBAAxB;AACA,OAAO,cAAP,MAA2B,qBAA3B;AACA,OAAO,SAAP,MAAsB,mBAAtB;AACA,OAAO,eAAP,MAA4B,oBAA5B;AACA,OAAO,eAAP,MAA4B,oBAA5B;AACA,OAAO,OAAP,MAAoB,WAApB;AAEA,IAAM,SAAS,GAAG,iBAAlB;IACO,I,GAAQ,S,CAAR,I;AAEP,IAAM,WAAW,GAAG,OAAO,CAAC,WAA5B;AACA,IAAM,SAAS,GAAG,WAAW,CAAC,SAAZ,CAAsB,QAAxC;AAEA,IAAM,OAAO,GAAG,OAAO,CAAC,YAAM;AAAA;;AAC5B,SAAO,eAAe,CAAC,WAAW,CAAC,4BAAD,CAAX,EAAD,CAAtB;AACD,CAFsB,YAAvB;AAIA,IAAM,aAAa,GAAG,OAAO,CAAC,KAAR,KAAkB,KAAxC;AACA,IAAM,UAAU,GAAG,OAAO,CAAC,KAA3B;AAEA;;;;;;;;AAOA,IAAM,eAAe,GAAG,SAAS,eAAT,CAAyB,EAAzB,EAA6B;AACnD,MAAI,aAAa,KAAK,KAAlB,IAA2B,OAAO,EAAP,KAAc,UAA7C,EAAyD;AACvD,WAAO,KAAP;AACD;;AAED,MAAI,GAAJ;;AACA,MAAI;AACF,IAAA,GAAG,GAAG,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,IAAV,CAAe,EAAf,CAAD,EAAqB,GAArB,CAAhB,CAAf;AACD,GAFD,CAEE,OAAO,MAAP,EAAe;AACf,WAAO,KAAP;AACD;;AAED,MAAI,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,GAArB,CAAJ,EAA+B;AAC7B,WAAO,IAAP;AACD;;AAED,MAAI,cAAc,KAAK,KAAvB,EAA8B;AAC5B,WAAO,WAAW,CAAC,EAAD,CAAX,KAAoB,wBAA3B;AACD;;AAED,SAAO,eAAe,CAAC,EAAD,CAAf,KAAwB,UAA/B;AACD,CArBD;;AAuBA,eAAe,eAAf","file":"is-async-function-x.esm.js","sourcesContent":["import toStringTag from 'to-string-tag-x';\nimport hasToStringTag from 'has-to-string-tag-x';\nimport normalise from 'normalize-space-x';\nimport replaceComments from 'replace-comments-x';\nimport $getPrototypeOf from 'get-prototype-of-x';\nimport attempt from 'attempt-x';\n\nconst isFnRegex = /^async function/;\nconst {test} = isFnRegex;\n\nconst functionCtr = attempt.constructor;\nconst fToString = functionCtr.prototype.toString;\n\nconst testRes = attempt(() => {\n  return $getPrototypeOf(functionCtr('return async function() {}')());\n});\n\nconst supportsAsync = testRes.threw === false;\nconst asyncProto = testRes.value;\n\n/**\n * Checks if `value` is classified as an `Async Function` object.\n *\n * @param {*} fn - The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n * else `false`.\n */\nconst isAsyncFunction = function isAsyncFunction(fn) {\n  if (supportsAsync === false || typeof fn !== 'function') {\n    return false;\n  }\n\n  let str;\n  try {\n    str = normalise(replaceComments(fToString.call(fn), ' '));\n  } catch (ignore) {\n    return false;\n  }\n\n  if (test.call(isFnRegex, str)) {\n    return true;\n  }\n\n  if (hasToStringTag === false) {\n    return toStringTag(fn) === '[object AsyncFunction]';\n  }\n\n  return $getPrototypeOf(fn) === asyncProto;\n};\n\nexport default isAsyncFunction;\n"]}